<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.batirplan.resrce.stock.mapper.StockMapper">
	
    <!-- 1. ORDER_DE_NO로 ORDER_NO 조회 -->
    <select id="selectOrderNoByOrderDeNo" resultType="String">
        SELECT ordr_no
          FROM TB_ORDER_DETAIL
         WHERE order_de_no = #{orderDeNo}
    </select>

    <!-- 2. ORDER_NO에 해당하는 DE_STTUS가 '1'인 주문 상세 건수 조회 -->
    <select id="countPendingOrderDetails" resultType="int">
        SELECT COUNT(*)
          FROM TB_ORDER_DETAIL
         WHERE ordr_no = #{orderNo}
           AND de_sttus = '1'
    </select>

    <!-- 3. 주문 완료 처리 업데이트 -->
    <update id="updateOrderComplete">
        UPDATE TB_ORDER
           SET ordr_sttus = '2',
               completion_date = SYSDATE
         WHERE ordr_no = #{orderNo}
    </update>
	
	
    <!-- 해당 품목 전체 재고 합계 조회 (모든 창고의 합산) -->
    <select id="selectTotalInventoryByPrdlstNo" resultType="int">
        SELECT NVL(SUM(INVNTRY_QY), 0)
          FROM TB_WAREHOUSE_PRODUCT_LIST
         WHERE prdlst_no = #{prdlstNo}
    </select>
    
    <!-- 품목 테이블에 재고 합계 반영 -->
    <update id="updateProductInventory">
        UPDATE TB_PRODUCT_LIST
           SET NOW_INVNTRY_QY = #{totalQty}
         WHERE prdlst_no = #{prdlstNo}
    </update>
	
	
	
    <sql id="searchSql">
        <if test="searchVO.ordrNo != null and searchVO.ordrNo != ''">
            AND tod.ordr_no LIKE '%' || #{searchVO.ordrNo} || '%'
        </if>
        <if test="searchVO.ordrDeNo != null and searchVO.ordrDeNo != ''">
            AND tod.order_de_no LIKE '%' || #{searchVO.ordrDeNo} || '%'
        </if>
        <if test="searchVO.prdlstNm != null and searchVO.prdlstNm != ''">
            AND tpl.prdlst_nm LIKE '%' || #{searchVO.prdlstNm} || '%'
        </if>
	</sql>
	
	<update id="updateReqSttus">
		UPDATE
			TB_REQUEST
		SET
			REQ_STTUS = '3'
		WHERE
			REQ_NO = #{param}
	</update>
	
    <select id="getStockTargetCount" parameterType="kr.or.batirplan.resrce.stock.vo.StockSearchVO">
        SELECT
            COUNT(*)
        FROM
            tb_order_detail tod
            JOIN tb_product_list tpl
              ON tod.prdlst_no = tpl.prdlst_no
        WHERE
            de_sttus = '1'
            <include refid="searchSql"/>
    </select>
    
    <select id="getStockTargetList" parameterType="map" resultType="kr.or.batirplan.resrce.order.vo.OrderDetailVO">
        SELECT
        	*
       	FROM
        (SELECT
        	ROWNUM AS rn, A.*
        FROM
        (SELECT
            tod.order_de_no       AS orderDeNo,
            tod.ordr_no           AS ordrNo,
            tod.prdlst_no         AS prdlstNo,
            tpl.prdlst_nm         AS prdlstNm,
            tod.ordr_qty          AS ordrQty,
            tod.total_price       AS totalPrice,
            tod.de_sttus          AS deSttus,
            tod.received_date     AS receivedDate
        FROM
            tb_order_detail tod
            JOIN tb_product_list tpl
              ON tod.prdlst_no = tpl.prdlst_no
        WHERE
            de_sttus = '1'
            <include refid="searchSql"/>
        ORDER BY
            tod.ordr_no DESC,
            tod.order_de_no DESC) A )
        WHERE rn BETWEEN #{pagingVO.startRow} AND #{pagingVO.endRow}
    </select>    
    
    <update id="updateOrderDeatailSttus">
    	UPDATE 
    		tb_order_detail
   		SET
   			de_sttus = '2',
   			RECEIVED_DATE = sysdate
 		WHERE
 			order_de_no = #{param}
    </update>
    
	<insert id="recodingStockIn" parameterType="map">
		INSERT INTO tb_product_list_wrhsdlvr_record
			(
				  rcord_no
				, wrhous_code
				, prdlst_no
				, wrhsdlvr_ty
				, wrhsdlvr_qy
				, wrhsdlvr_de
				, ordr_de_no
			)
		VALUES
			(
				  seq_wrhsdlvr.nextval
				, #{wrhousCode}
				, #{od.prdlstNo}
				, '01'
				, #{od.ordrQty}
				, TO_CHAR(SYSDATE, 'YYYYMMDD')
				, #{od.orderDeNo}
			)
	</insert>
	
	
	<update id="updateStockWareHouseProduct" parameterType="map">
	  MERGE INTO tb_warehouse_product_list T
	  USING (
	    SELECT 
	      #{wrhousCode} AS wrhous_code,
	      #{od.prdlstNo} AS prdlst_no,
	      #{od.ordrQty}  AS ordr_qty
	    FROM DUAL
	  ) S
	  ON (
	    T.wrhous_code = S.wrhous_code
	    AND T.prdlst_no = S.prdlst_no
	  )
	  WHEN MATCHED THEN
	    UPDATE
	      SET T.invntry_qy     = T.invntry_qy + S.ordr_qty,
	          T.newest_updt_de = SYSDATE
	  WHEN NOT MATCHED THEN
	    INSERT (
	      wrhous_code,
	      prdlst_no,
	      invntry_qy,
	      newest_updt_de
	    )
	    VALUES (
	      S.wrhous_code,
	      S.prdlst_no,
	      S.ordr_qty,
	      SYSDATE
	    )
	</update>
	
</mapper>